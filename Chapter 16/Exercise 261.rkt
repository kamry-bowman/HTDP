;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Exercise 261|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(define-struct IR [name price])

(define invEx1 (list (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)(make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2) (make-IR "Buckets" 0.75) (make-IR "Jars" 1.2)))




; Inventory -> Inventory
; creates an Inventory from an-inv for all
; those items that cost less than a dollar
(define (extract1 an-inv)
  (cond
    [(empty? an-inv) '()]
    [else
     (local ((define extract-rest (extract1 (rest an-inv))))
     (cond
       [(<= (IR-price (first an-inv)) 1.0)
        (cons (first an-inv) extract-rest)]
       [else extract-rest]))]))

(extract1 invEx1)