#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 22 #"Source Code Pro Black\0"
0 13 92 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 17 17 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 34 119 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 34 119 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 34 119 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 119 34 119 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 178 178 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 17 17 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 34 119 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 17 17 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 17 17 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 17 17 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1834 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 188
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname |Exer"
 #"cise 278|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #"
 #"(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"BG"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-across"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"MAX"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-across"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 11 1 #" "
0 0 14 3 15 #"body-seg-across"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"body-seg-diameter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"CENT-COLOR"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"FOOD-COLOR"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"BODY-SEG-IMG"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 11 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 10 #"CENT-COLOR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"FOOD-IMG"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 11 1 #" "
0 0 14 3 10 #"FOOD-COLOR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"centipede-speed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; a dir is a "
0 0 17 3 37 #"structure represented by a posn, with"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; posn-x equal to "
0 0 17 3 5 #"1 or "
0 0 17 3 8 #"-1, and "
0 0 17 3 13 #"posn-y equal "
0 0 17 3 3 #"to "
0 0 17 11 2 #"1 "
0 0 17 3 24 #"or -1. Posn-x represents"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; one unit towards "
0 0 17 3 4 #"the "
0 0 17 3 14 #"right, Posn-y "
0 0 17 3 11 #"represents "
0 0 17 11 2 #"a "
0 0 17 3 5 #"unit "
0 0 17 3 12 #"towards the "
0 0 17 3 8 #"bottom. "
0 0 17 3 10 #"These are "
0 0 17 11 13 #"reversed for "
0 0 17 3 16 #"negative numbers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; a body is a list "
0 0 17 3 3 #"of "
0 0 17 3 14 #"posns of body "
0 0 17 11 9 #"segments "
0 0 17 3 38 #"representing a centipede. It is either"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; -'()"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; - (cons posn list-of-posn)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; a Centipe is a structure where"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; (ma"
0 0 17 3 13 #"ke-centipede "
0 0 17 3 5 #"Posn "
0 0 17 3 14 #"List-of-dirs) "
0 0 17 3 8 #"creates "
0 0 17 11 2 #"a "
0 0 17 3 22 #"structure representing"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; a centipede with "
0 0 17 3 4 #"its "
0 0 17 3 5 #"body "
0 0 17 3 17 #"represented by a "
0 0 17 11 5 #"list "
0 0 17 3 14 #"of posns, and "
0 0 17 3 2 #"a "
0 0 17 3 5 #"posn "
0 0 17 3 17 #"representing the "
0 0 17 11 13 #"direction it "
0 0 17 3 19 #"is currently moving"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"centipede"
0 0 24 3 2 #" ["
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; a world is a structure where"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #" (make-ws "
0 0 17 3 35 #"centipede food) creates a structure"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; A world "
0 0 17 3 14 #"(world-state) "
0 0 17 3 15 #"represents the "
0 0 17 11 8 #"current "
0 0 17 3 11 #"state of a "
0 0 17 3 11 #"centipede, "
0 0 17 3 8 #"and the "
0 0 17 3 14 #"current state "
0 0 17 11 3 #"of "
0 0 17 3 17 #"food in the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ["
0 0 14 3 4 #"cent"
0 0 24 3 1 #" "
0 0 14 3 4 #"food"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Food is a a "
0 0 17 3 6 #"Posn, "
0 0 17 3 13 #"representing "
0 0 17 3 4 #"the "
0 0 17 11 12 #"location of "
0 0 17 3 4 #"food"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Centipede -> Centipede"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Consumes a tock, "
0 0 17 3 4 #"and "
0 0 17 3 10 #"moves the "
0 0 17 3 13 #"centipede in "
0 0 17 11 4 #"its "
0 0 17 3 11 #"current dir"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 6 #"(tock "
0 0 17 3 16 #"(make-centipede "
0 0 17 11 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 3 #"5) "
0 0 17 3 16 #"(make-posn 6 5) "
0 0 17 11 17 #"(make-posn 7 5)) "
0 0 17 3 18 #"(make-posn 1 0))) "
0 0 17 3 16 #"(make-centipede "
0 0 17 3 6 #"(list "
0 0 17 11 11 #"(make-posn "
0 0 17 3 10 #"(+ 5 (* 1 "
0 0 17 3 18 #"centipede-speed)) "
0 0 17 3 3 #"5) "
0 0 17 11 16 #"(make-posn 5 5) "
0 0 17 3 34 #"(make-posn 6 5)) (make-posn 1 0)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tock"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"eat-success?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-centipede"
0 0 24 3 2 #" ("
0 0 14 3 9 #"grow-cent"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")) "
0 0 17 11 32 #";possible refactor on grow-cent "
0 0 17 3 29 #"passed as a function argument"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"centipede-dir"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"food-create"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-food"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 11 2 #") "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-centipede"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 14 #"centipede-body"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"centipede-dir"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"centipede-dir"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 11 4 #"))) "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-food"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; World-State->Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Determines if "
0 0 17 3 4 #"the "
0 0 17 3 6 #"first "
0 0 17 3 15 #"centipede posn "
0 0 17 3 5 #"occup"
0 0 17 11 4 #"ies "
0 0 17 3 9 #"the same "
0 0 17 3 6 #"space "
0 0 17 3 13 #"as the food, "
0 0 17 3 8 #"returns "
0 0 17 3 8 #"true if "
0 0 17 11 4 #"so, "
0 0 17 3 15 #"otherwise false"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 14 #"(eat-success? "
0 0 17 11 12 #"(make-world "
0 0 17 3 16 #"(make-centipede "
0 0 17 3 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 3 #"4) "
0 0 17 11 13 #"(make-posn 6 "
0 0 17 3 4 #"4)) "
0 0 17 3 13 #"(make-posn 1 "
0 0 17 3 28 #"0)) (make-posn 5 4))) #true)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 14 #"(eat-success? "
0 0 17 11 12 #"(make-world "
0 0 17 3 9 #"(make-cen"
0 0 17 3 7 #"tipede "
0 0 17 3 6 #"(list "
0 0 17 3 13 #"(make-posn 6 "
0 0 17 3 3 #"5) "
0 0 17 11 13 #"(make-posn 6 "
0 0 17 3 4 #"4)) "
0 0 17 3 13 #"(make-posn 1 "
0 0 17 3 29 #"0)) (make-posn 5 4))) #false)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"eat-success?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 11 4 #"))) "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-food"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"grow-cent"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"move-add-seg"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 13 #"centipede-dir"
0 0 24 11 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; List-of-Posns Posn -> List-of-Posn"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Consumes a "
0 0 17 3 10 #"centipede "
0 0 17 3 6 #"posn, "
0 0 17 11 16 #"and returns the "
0 0 17 3 41 #"centipede posn after one unit of movement"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 6 #"(move "
0 0 17 3 6 #"(list "
0 0 17 11 17 #"(make-posn 5 4)) "
0 0 17 3 16 #"(make-posn 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";              "
0 0 17 3 6 #"(list "
0 0 17 3 11 #"(make-posn "
0 0 17 11 5 #"(+ 5 "
0 0 17 3 21 #"centipede-speed) 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";(che"
0 0 17 3 10 #"ck-expect "
0 0 17 3 6 #"(move "
0 0 17 3 6 #"(list "
0 0 17 11 16 #"(make-posn 5 4) "
0 0 17 3 17 #"(make-posn 5 3)) "
0 0 17 3 18 #"(make-posn 0 -1)) "
0 0 17 11 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 3 #"(- "
0 0 17 3 2 #"4 "
0 0 17 3 18 #"centipede-speed)) "
0 0 17 11 13 #"(make-posn 5 "
0 0 17 3 4 #"4)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"update-body-segs"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";List of Posn, Posn -> List of Posn"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 18 #"(update-body-segs "
0 0 17 3 4 #"(lis"
0 0 17 3 2 #"t "
0 0 17 11 11 #"(make-posn "
0 0 17 3 2 #"5 "
0 0 17 3 4 #"4)) "
0 0 17 3 13 #"(make-posn 1 "
0 0 17 3 10 #"0)) (list "
0 0 17 11 16 #"(make-posn (+ 5 "
0 0 17 3 21 #"centipede-speed) 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 18 #"(update-body-segs "
0 0 17 3 6 #"(list "
0 0 17 11 11 #"(make-posn "
0 0 17 3 2 #"5 "
0 0 17 3 3 #"4) "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 4 #"3)) "
0 0 17 3 13 #"(make-posn 0 "
0 0 17 3 5 #"-1)) "
0 0 17 11 6 #"(list "
0 0 17 3 16 #"(make-posn 5 (- "
0 0 17 3 2 #"4 "
0 0 17 3 18 #"centipede-speed)) "
0 0 17 11 13 #"(make-posn 5 "
0 0 17 3 4 #"4)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-body-segs"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"move-remove-seg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"move-add-seg"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; List of Posn, Posn -> List of Posn"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Uses dir Posn to "
0 0 17 3 16 #"determine a new "
0 0 17 3 6 #"first "
0 0 17 11 9 #"posn for "
0 0 17 3 2 #"a "
0 0 17 3 40 #"new front body-segment for the centipede"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 14 #"(move-add-seg "
0 0 17 3 6 #"(list "
0 0 17 11 13 #"(make-posn 5 "
0 0 17 3 4 #"4)) "
0 0 17 3 13 #"(make-posn 1 "
0 0 17 3 10 #"0)) (list "
0 0 17 11 16 #"(make-posn (+ 5 "
0 0 17 3 37 #"centipede-speed) 4) (make-posn 5 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 14 #"(move-add-seg "
0 0 17 3 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 11 3 #"4) "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 4 #"3)) "
0 0 17 3 13 #"(make-posn 0 "
0 0 17 3 5 #"-1)) "
0 0 17 11 6 #"(list "
0 0 17 3 16 #"(make-posn 5 (- "
0 0 17 3 2 #"4 "
0 0 17 3 18 #"centipede-speed)) "
0 0 17 3 11 #"(make-posn "
0 0 17 11 2 #"5 "
0 0 17 3 20 #"4) (make-posn 5 3)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"move-add-seg"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #") "
0 0 14 3 15 #"centipede-speed"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 11 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #") "
0 0 14 3 15 #"centipede-speed"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"lop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; List of Posn -> List of Posn"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Removes last Posn from a list of Posn"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 17 #"(move-remove-seg "
0 0 17 3 6 #"(list "
0 0 17 11 13 #"(make-posn 6 "
0 0 17 3 3 #"4) "
0 0 17 3 4 #"(mak"
0 0 17 3 37 #"e-posn 5 4))) (list (make-posn 6 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 17 #"(move-remove-seg "
0 0 17 3 6 #"(list "
0 0 17 11 13 #"(make-posn 4 "
0 0 17 3 3 #"4) "
0 0 17 3 16 #"(make-posn 5 4) "
0 0 17 3 18 #"(make-posn 5 3))) "
0 0 17 11 6 #"(list "
0 0 17 3 33 #"(make-posn 4 4) (make-posn 5 4)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"move-remove-seg"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 3 #") ("
0 0 14 3 15 #"move-remove-seg"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Posn Centipede -> Posn "
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Inputs a posn, "
0 0 17 3 19 #"representing prior "
0 0 17 3 5 #"food "
0 0 17 11 10 #"position, "
0 0 17 3 4 #"and "
0 0 17 3 10 #"creates a "
0 0 17 3 7 #"random "
0 0 17 3 5 #"Posn "
0 0 17 3 10 #"for food, "
0 0 17 3 12 #"making sure "
0 0 17 11 3 #"it "
0 0 17 3 26 #"is not the prior food posn"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(check-satisfied "
0 0 17 3 13 #"(food-create "
0 0 17 3 11 #"(make-posn "
0 0 17 11 6 #"1 1)) "
0 0 17 3 10 #"not=-1-1?)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"food-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"food-check-create"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 3 #"MAX"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 3 #"MAX"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Posn Centipede Posn -> Posn "
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; generative recursion "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";Checks whether "
0 0 17 3 6 #"prior "
0 0 17 3 12 #"Posn (first "
0 0 17 11 6 #"posn, "
0 0 17 3 13 #"representing "
0 0 17 3 6 #"prior "
0 0 17 3 5 #"food "
0 0 17 3 14 #"position) and "
0 0 17 3 2 #"ca"
0 0 17 11 8 #"ndidate "
0 0 17 3 8 #"(second "
0 0 17 3 15 #"posn, proposed "
0 0 17 3 19 #"randomly generated "
0 0 17 11 5 #"posn "
0 0 17 3 5 #"from "
0 0 17 3 13 #"food-create) "
0 0 17 3 4 #"are "
0 0 17 3 15 #"the same posn. "
0 0 17 3 5 #"Also "
0 0 17 11 7 #"checks "
0 0 17 3 3 #"if "
0 0 17 3 15 #"candidate posn "
0 0 17 3 5 #"lies "
0 0 17 3 14 #"under a space "
0 0 17 11 8 #"already "
0 0 17 3 9 #"occupied "
0 0 17 3 3 #"by "
0 0 17 3 11 #"centipede. "
0 0 17 3 12 #"Accepts the "
0 0 17 3 10 #"candidate "
0 0 17 11 3 #"if "
0 0 17 3 5 #"they "
0 0 17 3 4 #"are "
0 0 17 3 10 #"different "
0 0 17 3 5 #"from "
0 0 17 3 5 #"each "
0 0 17 3 11 #"other, and "
0 0 17 11 10 #"the space "
0 0 17 3 3 #"is "
0 0 17 3 4 #"not "
0 0 17 3 2 #"oc"
0 0 17 3 10 #"cupied by "
0 0 17 3 11 #"centipede, "
0 0 17 3 10 #"otherwise "
0 0 17 11 6 #"calls "
0 0 17 3 18 #"food-create again "
0 0 17 3 5 #"with "
0 0 17 3 10 #"the input "
0 0 17 3 10 #"remaining "
0 0 17 11 4 #"the "
0 0 17 3 17 #"prior food posn. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"food-check-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 9 #"candidate"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"food-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 9 #"candidate"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Posn -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; use for testing only "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"not=-1-1?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; World-state, Key-event -> World-state"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Consumes a "
0 0 17 3 10 #"key-event "
0 0 17 3 4 #"and "
0 0 17 11 19 #"centipede, changes "
0 0 17 3 12 #"centipede's "
0 0 17 3 10 #"direction "
0 0 17 3 27 #"if key event is directional"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"control"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 16 #"directional-cent"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 2 #") "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"world-food"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Centipede, Key-event -> Centipede"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Consumes a "
0 0 17 3 10 #"centipede "
0 0 17 3 6 #"and a "
0 0 17 3 11 #"key-event, "
0 0 17 11 8 #"returns "
0 0 17 3 43 #"centipede with direction based on key-event"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"directional-cent"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-cent-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #" ) ("
0 0 14 3 12 #"set-cent-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 4 #" ) ("
0 0 14 3 12 #"set-cent-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-cent-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";Centipede, Posn -> Centipde"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";Sets centipedes dir property to posn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"set-cent-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"make-centipede"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 13 #"centipede-dir"
0 0 24 11 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"centipede-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 13 #"centipede-dir"
0 0 24 11 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"centipede-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Centipede -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Render consumes a centipede and draws it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"render-body-segs"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"render-obj"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-food"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 11 44 #"                                            "
0 0 14 3 8 #"FOOD-IMG"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 44 #"                                            "
0 0 14 3 2 #"BG"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; World-state -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Render consumes "
0 0 17 3 2 #"a "
0 0 17 3 3 #"cen"
0 0 17 3 11 #"tipede and "
0 0 17 3 6 #"draws "
0 0 17 11 6 #"final "
0 0 17 3 27 #"scene with text explanation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-final"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"place-image/align"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 14 #"determine-text"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 2 #"50"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1/5"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1/5"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 6 #"\"left\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 5 #"\"top\""
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; World-state -> String"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Reviews "
0 0 17 3 12 #"world-state "
0 0 17 3 4 #"and "
0 0 17 3 16 #"reason for game "
0 0 17 11 8 #"ending, "
0 0 17 3 4 #"and "
0 0 17 3 10 #"returns a "
0 0 17 3 7 #"string "
0 0 17 3 11 #"explaining "
0 0 17 3 7 #"reason "
0 0 17 11 9 #"for game "
0 0 17 3 23 #"ending and final score."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"determine-text"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 14 #"out-of-bounds?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 11 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 11 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #"))))) "
0 0 19 3 25 #"\"Game Over \\n Hit a wall\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 11 #"crash-self?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 11 3 #")) "
0 0 24 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))) "
0 0 19 11 19 #"\"Game Over \\n  Hit "
0 0 19 3 5 #"self\""
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 11 #"\"\\nScore: \""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; List-of-Posns, Scene -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Consumes a "
0 0 17 3 15 #"list-of-posns, "
0 0 17 3 7 #"scene, "
0 0 17 3 10 #"and draws "
0 0 17 11 4 #"the "
0 0 17 3 22 #"centipede on the scene"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"render-body-segs"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 2 #") "
0 0 14 3 2 #"bg"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"render-obj"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 11 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 2 #") "
0 0 14 3 12 #"BODY-SEG-IMG"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"render-obj"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 11 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 2 #") "
0 0 14 3 12 #"BODY-SEG-IMG"
0 0 24 3 2 #" ("
0 0 14 3 16 #"render-body-segs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 11 2 #") "
0 0 14 3 2 #"bg"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Posn, Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Consumes a posn "
0 0 17 3 4 #"and "
0 0 17 3 3 #"an "
0 0 17 3 11 #"image, and "
0 0 17 3 6 #"draws "
0 0 17 11 8 #"the img "
0 0 17 3 26 #"at posn on bk (background)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"render-obj"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"place-image/align"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 3 #"img"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 6 #"\"left\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 5 #"\"top\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 2 #"bg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; World->Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Stops the world "
0 0 17 3 3 #"if "
0 0 17 3 3 #"it "
0 0 17 3 11 #"contains a "
0 0 17 3 10 #"centipede "
0 0 17 11 5 #"that "
0 0 17 3 4 #"has "
0 0 17 3 25 #"a wall or run into itself"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stopper"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"stopper-cent"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-cent"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Centipede->Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Checks to see if "
0 0 17 3 2 #"a "
0 0 17 3 14 #"centipede has "
0 0 17 3 8 #"crashed "
0 0 17 11 7 #"into a "
0 0 17 3 14 #"wall or itself"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stopper-cent"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"out-of-bounds?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 15 #"body-seg-radius"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"crash-self?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 14 #"centipede-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Number -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Receives a "
0 0 17 3 8 #"Numbers "
0 0 17 3 4 #"for "
0 0 17 3 6 #"x and "
0 0 17 3 10 #"y of lead "
0 0 17 11 10 #"centipede "
0 0 17 3 29 #"posns and checks for inbounds"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"out-of-bounds?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";Posn, Lop -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Checks to see if "
0 0 17 3 5 #"lead "
0 0 17 3 10 #"centipede "
0 0 17 3 5 #"posn "
0 0 17 11 9 #"occupies "
0 0 17 3 5 #"same "
0 0 17 3 9 #"space as "
0 0 17 3 27 #"one of the other body posns"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 13 #"(crash-self? "
0 0 17 3 11 #"(make-posn "
0 0 17 3 5 #"5 4) "
0 0 17 11 6 #"(list "
0 0 17 3 6 #"(make-"
0 0 17 3 7 #"posn 5 "
0 0 17 3 28 #"5) (make-posn 5 6))) #false)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(check-expect "
0 0 17 3 13 #"(crash-self? "
0 0 17 3 11 #"(make-posn "
0 0 17 3 5 #"5 4) "
0 0 17 11 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 3 #"5) "
0 0 17 3 16 #"(make-posn 4 5) "
0 0 17 11 16 #"(make-posn 4 4) "
0 0 17 3 25 #"(make-posn 5 4))) #true) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crash-self?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"lop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"worm-main"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 4 #"init"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 4 #"tock"
0 0 24 3 1 #" "
0 0 21 3 3 #".15"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 7 #"stopper"
0 0 24 3 1 #" "
0 0 14 3 12 #"render-final"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 7 #"control"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    )))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(worm-main "
0 0 17 3 12 #"(make-world "
0 0 17 3 16 #"(make-centipede "
0 0 17 11 6 #"(list "
0 0 17 3 13 #"(make-posn 5 "
0 0 17 3 3 #"5) "
0 0 17 3 16 #"(make-posn 6 5) "
0 0 17 11 17 #"(make-posn 7 5)) "
0 0 17 3 17 #"(make-posn 0 1)) "
0 0 17 3 26 #"(food-create (make-posn 0 "
0 0 17 3 5 #"0))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"worm-main"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-centipede"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 11 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 11 3 #")) "
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"food-create"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 11 2 #") "
0 0 24 3 1 #"("
0 0 14 3 14 #"make-centipede"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 11 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0           0
