;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |Exercise 328|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; An S-expr is one of: 
; – Atom
; – SL
 
; An SL is one of: 
; – '()
; – (cons S-expr SL)

; An Atom is one of: 
; – Number
; – String
; – Symbol

; S-expr -> Boolean
; Determines whether S-expr is an Atom
;(check-expect (atom? '(3 4)) #false)
;(check-expect (atom? 'k) #true)
(define (atom? sexp)
  (or (number? sexp)
      (string? sexp)
      (symbol? sexp)))

; S-expr Symbol Symbol -> S-expr 
; substitutes all occurrences of sy1 with sy2 in sexp
(check-expect (substitute 'world 'hello 'cat) 'world)
(check-expect (substitute '(world hello) 'hello 'cat) '(world cat))
(check-expect (substitute '(((world) hello) hello) 'hello 'cat) '(((world) cat) cat))
(check-expect (substitute `(world ,1 (,"house" ,"usher") cat hello) 'hello 'cat) `(world ,1 (,"house" ,"usher") cat cat))

(define (substitute sexp sy1 sy2)
  (local ((define (for-sexp-substitute sexp)
            (cond [(atom? sexp) (for-atom-substitute sexp)]
                  [else (for-sl-substitute sexp)]))
          (define (for-sl-substitute sl)
           (cond [(empty? sl) '()]
                 [else (cons (for-sexp-substitute (first sl))
                             (for-sl-substitute (rest sl)))]
                 ))
          (define (for-atom-substitute atom)
            (cond [(number? atom) atom]
                  [(string? atom) atom]
                  [(symbol? atom) (if (symbol=? sy1 atom)
                                      sy2
                                      atom)])))
    (for-sexp-substitute sexp)))
